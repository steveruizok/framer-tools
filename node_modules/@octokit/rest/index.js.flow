declare module "github" {
  declare type Header = string;

  declare type EmptyParams = {};

  declare type Options = {
    timeout?: number,
    host?: string,
    pathPrefix?: string,
    protocol?: string,
    port?: number,
    proxy?: string,
    ca?: string,
    headers?: { [header: Header]: any },
    rejectUnauthorized?: boolean,
    family?: number
  };

  declare type AuthBasic = {
    type: "basic",
    username: string,
    password: string
  };

  declare type AuthOAuthToken = {
    type: "oauth",
    token: string
  };

  declare type AuthOAuthSecret = {
    type: "oauth",
    key: string,
    secret: string
  };

  declare type AuthUserToken = {
    type: "token",
    token: string
  };

  declare type AuthJWT = {
    type: "integration",
    token: string
  };

  /* @deprecated Use "app" instead of "integration */
  declare type AuthDeprecatedJWT = {
    type: "integration",
    token: string
  };

  declare type Auth =
    | AuthBasic
    | AuthOAuthToken
    | AuthOAuthSecret
    | AuthUserToken
    | AuthJWT
    | AuthDeprecatedJWT;

  declare type Link =
    | { link: string }
    | { headers: { link: string } }
    | string
    | any;

  declare type Callback = (error: ?Error, result: ?any) => any;

  declare type ActivityCheckStarringRepoParams = {
    owner: string,
    repo: string
  };
  declare type ActivityDeleteRepoSubscriptionParams = {
    owner: string,
    repo: string
  };
  declare type ActivityDeleteThreadSubscriptionParams = {
    thread_id: number
  };
  declare type ActivityGetRepoSubscriptionParams = {
    owner: string,
    repo: string
  };
  declare type ActivityGetThreadParams = {
    thread_id: number
  };
  declare type ActivityGetThreadSubscriptionParams = {
    thread_id: number
  };
  declare type ActivityListEventsForOrgParams = {
    username: string,
    org: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListEventsForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListNotificationsParams = {
    all?: boolean,
    participating?: boolean,
    since?: string,
    before?: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListNotificationsForRepoParams = {
    owner: string,
    repo: string,
    all?: boolean,
    participating?: boolean,
    since?: string,
    before?: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListPublicEventsParams = {
    per_page?: number,
    page?: number
  };
  declare type ActivityListPublicEventsForOrgParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListPublicEventsForRepoNetworkParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListPublicEventsForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListReceivedEventsForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListReceivedPublicEventsForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListRepoEventsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListReposStarredByAuthenticatedUserParams = {
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ActivityListReposStarredByUserParams = {
    username: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ActivityListReposWatchedByUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListStargazersForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityListWatchedReposForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type ActivityListWatchersForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityMarkAsReadParams = {
    last_read_at?: string
  };
  declare type ActivityMarkNotificationsAsReadForRepoParams = {
    owner: string,
    repo: string,
    last_read_at?: string
  };
  declare type ActivityMarkThreadAsReadParams = {
    thread_id: number
  };
  declare type ActivitySetRepoSubscriptionParams = {
    owner: string,
    repo: string,
    subscribed?: boolean,
    ignored?: boolean
  };
  declare type ActivitySetThreadSubscriptionParams = {
    thread_id: number,
    ignored?: boolean
  };
  declare type ActivityStarRepoParams = {
    owner: string,
    repo: string
  };
  declare type ActivityUnstarRepoParams = {
    owner: string,
    repo: string
  };
  declare type AppsAddRepoToInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type AppsCheckAccountIsAssociatedWithAnyParams = {
    account_id: number,
    per_page?: number,
    page?: number
  };
  declare type AppsCheckAccountIsAssociatedWithAnyStubbedParams = {
    account_id: number,
    per_page?: number,
    page?: number
  };
  declare type AppsCreateFromManifestParams = {
    code: string
  };
  declare type AppsCreateInstallationTokenParams = {
    installation_id: number
  };
  declare type AppsFindOrgInstallationParams = {
    org: string
  };
  declare type AppsFindRepoInstallationParams = {
    owner: string,
    repo: string
  };
  declare type AppsFindUserInstallationParams = {
    username: string
  };
  declare type AppsGetBySlugParams = {
    app_slug: string
  };
  declare type AppsGetInstallationParams = {
    installation_id: number
  };
  declare type AppsListAccountsUserOrOrgOnPlanParams = {
    plan_id: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type AppsListAccountsUserOrOrgOnPlanStubbedParams = {
    plan_id: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type AppsListInstallationReposForAuthenticatedUserParams = {
    installation_id: number,
    per_page?: number,
    page?: number
  };
  declare type AppsListInstallationsParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListInstallationsForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListMarketplacePurchasesForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListMarketplacePurchasesForAuthenticatedUserStubbedParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListPlansParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListPlansStubbedParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsListReposParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsRemoveRepoFromInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type AuthorizationCheckAuthorizationParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationCreateAuthorizationParams = {
    scopes?: string[],
    note: string,
    note_url?: string,
    client_id?: string,
    client_secret?: string,
    fingerprint?: string
  };
  declare type AuthorizationDeleteAuthorizationParams = {
    authorization_id: number
  };
  declare type AuthorizationDeleteGrantParams = {
    grant_id: number
  };
  declare type AuthorizationGetAuthorizationParams = {
    authorization_id: number
  };
  declare type AuthorizationGetGrantParams = {
    grant_id: number
  };
  declare type AuthorizationGetOrCreateAuthorizationForAppParams = {
    client_id: string,
    client_secret: string,
    scopes?: string[],
    note?: string,
    note_url?: string,
    fingerprint?: string
  };
  declare type AuthorizationGetOrCreateAuthorizationForAppFingerprintParams = {
    client_id: string,
    fingerprint: string,
    client_secret: string,
    scopes?: string[],
    note?: string,
    note_url?: string
  };
  declare type AuthorizationListAuthorizationsParams = {
    per_page?: number,
    page?: number
  };
  declare type AuthorizationListGrantsParams = {
    per_page?: number,
    page?: number
  };
  declare type AuthorizationResetAuthorizationParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationRevokeAuthorizationForApplicationParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationRevokeGrantForApplicationParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationUpdateAuthorizationParams = {
    authorization_id: number,
    scopes?: string[],
    add_scopes?: string[],
    remove_scopes?: string[],
    note?: string,
    note_url?: string,
    fingerprint?: string
  };
  declare type ChecksCreateParams = {
    owner: string,
    repo: string,
    name: string,
    head_sha: string,
    details_url?: string,
    external_id?: string,
    status?: "queued" | "in_progress" | "completed",
    started_at?: string,
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required",
    completed_at?: string,
    output?: ChecksCreateParamsOutput,
    actions?: ChecksCreateParamsActions[]
  };
  declare type ChecksCreateSuiteParams = {
    owner: string,
    repo: string,
    head_sha: string
  };
  declare type ChecksGetParams = {
    owner: string,
    repo: string,
    check_run_id: number
  };
  declare type ChecksGetSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number
  };
  declare type ChecksListAnnotationsParams = {
    owner: string,
    repo: string,
    check_run_id: number,
    per_page?: number,
    page?: number
  };
  declare type ChecksListForRefParams = {
    owner: string,
    repo: string,
    ref: string,
    check_name?: string,
    status?: "queued" | "in_progress" | "completed",
    filter?: "latest" | "all",
    per_page?: number,
    page?: number
  };
  declare type ChecksListForSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number,
    check_name?: string,
    status?: "queued" | "in_progress" | "completed",
    filter?: "latest" | "all",
    per_page?: number,
    page?: number
  };
  declare type ChecksListSuitesForRefParams = {
    owner: string,
    repo: string,
    ref: string,
    app_id?: number,
    check_name?: string,
    per_page?: number,
    page?: number
  };
  declare type ChecksRerequestSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number
  };
  declare type ChecksSetSuitesPreferencesParams = {
    owner: string,
    repo: string,
    auto_trigger_checks?: ChecksSetSuitesPreferencesParamsAutoTriggerChecks[]
  };
  declare type ChecksUpdateParams = {
    owner: string,
    repo: string,
    check_run_id: number,
    name?: string,
    details_url?: string,
    external_id?: string,
    started_at?: string,
    status?: "queued" | "in_progress" | "completed",
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required",
    completed_at?: string,
    output?: ChecksUpdateParamsOutput,
    actions?: ChecksUpdateParamsActions[]
  };
  declare type CodesOfConductGetConductCodeParams = {
    key: string
  };
  declare type CodesOfConductGetForRepoParams = {
    owner: string,
    repo: string
  };
  declare type GistsCheckIsStarredParams = {
    gist_id: string
  };
  declare type GistsCreateParams = {
    files: GistsCreateParamsFiles,
    description?: string,
    public?: boolean
  };
  declare type GistsCreateCommentParams = {
    gist_id: string,
    body: string
  };
  declare type GistsDeleteParams = {
    gist_id: string
  };
  declare type GistsDeleteCommentParams = {
    gist_id: string,
    comment_id: number
  };
  declare type GistsForkParams = {
    gist_id: string
  };
  declare type GistsGetParams = {
    gist_id: string
  };
  declare type GistsGetCommentParams = {
    gist_id: string,
    comment_id: number
  };
  declare type GistsGetRevisionParams = {
    gist_id: string,
    sha: string
  };
  declare type GistsListParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListCommentsParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListCommitsParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListForksParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListPublicParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListPublicForUserParams = {
    username: string,
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsListStarredParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsStarParams = {
    gist_id: string
  };
  declare type GistsUnstarParams = {
    gist_id: string
  };
  declare type GistsUpdateParams = {
    gist_id: string,
    description?: string,
    files?: GistsUpdateParamsFiles
  };
  declare type GistsUpdateCommentParams = {
    gist_id: string,
    comment_id: number,
    body: string
  };
  declare type GitdataCreateBlobParams = {
    owner: string,
    repo: string,
    content: string,
    encoding?: string
  };
  declare type GitdataCreateCommitParams = {
    owner: string,
    repo: string,
    message: string,
    tree: string,
    parents: string[],
    committer?: GitdataCreateCommitParamsCommitter,
    author?: GitdataCreateCommitParamsAuthor
  };
  declare type GitdataCreateRefParams = {
    owner: string,
    repo: string,
    ref: string,
    sha: string
  };
  declare type GitdataCreateTagParams = {
    owner: string,
    repo: string,
    tag: string,
    message: string,
    object: string,
    type: "commit" | "tree" | "blob",
    tagger?: GitdataCreateTagParamsTagger
  };
  declare type GitdataCreateTreeParams = {
    owner: string,
    repo: string,
    tree: GitdataCreateTreeParamsTree[],
    base_tree?: string
  };
  declare type GitdataDeleteRefParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type GitdataGetBlobParams = {
    owner: string,
    repo: string,
    file_sha: string
  };
  declare type GitdataGetCommitParams = {
    owner: string,
    repo: string,
    commit_sha: string
  };
  declare type GitdataGetRefParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type GitdataGetTagParams = {
    owner: string,
    repo: string,
    tag_sha: string
  };
  declare type GitdataGetTreeParams = {
    owner: string,
    repo: string,
    tree_sha: string,
    recursive?: 1
  };
  declare type GitdataListRefsParams = {
    owner: string,
    repo: string,
    namespace?: string,
    per_page?: number,
    page?: number
  };
  declare type GitdataUpdateRefParams = {
    owner: string,
    repo: string,
    ref: string,
    sha: string,
    force?: boolean
  };
  declare type GitignoreGetTemplateParams = {
    name: string
  };
  declare type IssuesAddAssigneesParams = {
    owner: string,
    repo: string,
    number: number,
    assignees?: string[]
  };
  declare type IssuesAddLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    labels: string[]
  };
  declare type IssuesCheckAssigneeParams = {
    owner: string,
    repo: string,
    assignee: string
  };
  declare type IssuesCreateParams = {
    owner: string,
    repo: string,
    title: string,
    body?: string,
    assignee?: string,
    milestone?: number,
    labels?: string[],
    assignees?: string[]
  };
  declare type IssuesCreateCommentParams = {
    owner: string,
    repo: string,
    number: number,
    body: string
  };
  declare type IssuesCreateLabelParams = {
    owner: string,
    repo: string,
    name: string,
    color: string,
    description?: string
  };
  declare type IssuesCreateMilestoneParams = {
    owner: string,
    repo: string,
    title: string,
    state?: "open" | "closed",
    description?: string,
    due_on?: string
  };
  declare type IssuesDeleteCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type IssuesDeleteLabelParams = {
    owner: string,
    repo: string,
    name: string
  };
  declare type IssuesDeleteMilestoneParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesGetParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesGetCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetEventParams = {
    owner: string,
    repo: string,
    event_id: number
  };
  declare type IssuesGetLabelParams = {
    owner: string,
    repo: string,
    name: string
  };
  declare type IssuesGetMilestoneParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesListParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListAssigneesParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListCommentsParams = {
    owner: string,
    repo: string,
    number: number,
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListCommentsForRepoParams = {
    owner: string,
    repo: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string
  };
  declare type IssuesListEventsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesListEventsForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListEventsForTimelineParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesListForAuthenticatedUserParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListForOrgParams = {
    org: string,
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListForRepoParams = {
    owner: string,
    repo: string,
    milestone?: string,
    state?: "open" | "closed" | "all",
    assignee?: string,
    creator?: string,
    mentioned?: string,
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListLabelsForMilestoneParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesListLabelsForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesListLabelsOnIssueParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesListMilestonesForRepoParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    sort?: "due_on" | "completeness",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type IssuesLockParams = {
    owner: string,
    repo: string,
    number: number,
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
  };
  declare type IssuesRemoveAssigneesParams = {
    owner: string,
    repo: string,
    number: number,
    assignees?: string[]
  };
  declare type IssuesRemoveLabelParams = {
    owner: string,
    repo: string,
    number: number,
    name: string
  };
  declare type IssuesRemoveLabelsParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesReplaceLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    labels?: string[]
  };
  declare type IssuesUnlockParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesUpdateParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    body?: string,
    assignee?: string,
    state?: "open" | "closed",
    milestone?: number,
    labels?: string[],
    assignees?: string[]
  };
  declare type IssuesUpdateCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type IssuesUpdateLabelParams = {
    owner: string,
    repo: string,
    current_name: string,
    name?: string,
    color?: string,
    description?: string
  };
  declare type IssuesUpdateMilestoneParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    state?: "open" | "closed",
    description?: string,
    due_on?: string
  };
  declare type LicensesGetParams = {
    license: string
  };
  declare type LicensesGetForRepoParams = {
    owner: string,
    repo: string
  };
  declare type MarkdownRenderParams = {
    text: string,
    mode?: "markdown" | "gfm",
    context?: string
  };
  declare type MarkdownRenderRawParams = {
    data: string
  };
  declare type MigrationsCancelImportParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsDeleteArchiveForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsDeleteArchiveForOrgParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsGetArchiveForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsGetArchiveForOrgParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsGetCommitAuthorsParams = {
    owner: string,
    repo: string,
    since?: string
  };
  declare type MigrationsGetImportProgressParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsGetLargeFilesParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsGetStatusForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsGetStatusForOrgParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsListForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type MigrationsListForOrgParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type MigrationsMapCommitAuthorParams = {
    owner: string,
    repo: string,
    author_id: number,
    email?: string,
    name?: string
  };
  declare type MigrationsSetLfsPreferenceParams = {
    owner: string,
    repo: string,
    use_lfs: "opt_in" | "opt_out"
  };
  declare type MigrationsStartForAuthenticatedUserParams = {
    repositories: string[],
    lock_repositories?: boolean,
    exclude_attachments?: boolean
  };
  declare type MigrationsStartForOrgParams = {
    org: string,
    repositories: string[],
    lock_repositories?: boolean,
    exclude_attachments?: boolean
  };
  declare type MigrationsStartImportParams = {
    owner: string,
    repo: string,
    vcs_url: string,
    vcs?: "subversion" | "git" | "mercurial" | "tfvc",
    vcs_username?: string,
    vcs_password?: string,
    tfvc_project?: string
  };
  declare type MigrationsUnlockRepoForAuthenticatedUserParams = {
    migration_id: number,
    repo_name: string
  };
  declare type MigrationsUnlockRepoForOrgParams = {
    org: string,
    migration_id: number,
    repo_name: string
  };
  declare type MigrationsUpdateImportParams = {
    owner: string,
    repo: string,
    vcs_username?: string,
    vcs_password?: string
  };
  declare type OrgsAddOrUpdateMembershipParams = {
    org: string,
    username: string,
    role?: "admin" | "member"
  };
  declare type OrgsBlockUserParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckBlockedUserParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckPublicMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsConcealMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsConvertMemberToOutsideCollaboratorParams = {
    org: string,
    username: string
  };
  declare type OrgsCreateHookParams = {
    org: string,
    name: string,
    config: OrgsCreateHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type OrgsCreateInvitationParams = {
    org: string,
    invitee_id?: number,
    email?: string,
    role?: "admin" | "direct_member" | "billing_manager",
    team_ids?: number[]
  };
  declare type OrgsDeleteHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsGetParams = {
    org: string
  };
  declare type OrgsGetHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsGetMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsGetMembershipForAuthenticatedUserParams = {
    org: string
  };
  declare type OrgsListParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsListBlockedUsersParams = {
    org: string
  };
  declare type OrgsListForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type OrgsListForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsListHooksParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsListInvitationTeamsParams = {
    org: string,
    invitation_id: number,
    per_page?: number,
    page?: number
  };
  declare type OrgsListMembersParams = {
    org: string,
    filter?: "2fa_disabled" | "all",
    role?: "all" | "admin" | "member",
    per_page?: number,
    page?: number
  };
  declare type OrgsListMembershipsParams = {
    state?: "active" | "pending",
    per_page?: number,
    page?: number
  };
  declare type OrgsListOutsideCollaboratorsParams = {
    org: string,
    filter?: "2fa_disabled" | "all",
    per_page?: number,
    page?: number
  };
  declare type OrgsListPendingInvitationsParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsListPublicMembersParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsPingHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsPublicizeMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveMemberParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveOutsideCollaboratorParams = {
    org: string,
    username: string
  };
  declare type OrgsUnblockUserParams = {
    org: string,
    username: string
  };
  declare type OrgsUpdateParams = {
    org: string,
    billing_email?: string,
    company?: string,
    email?: string,
    location?: string,
    name?: string,
    description?: string,
    has_organization_projects?: boolean,
    has_repository_projects?: boolean,
    default_repository_permission?: "read" | "write" | "admin" | "none",
    members_can_create_repositories?: boolean
  };
  declare type OrgsUpdateHookParams = {
    org: string,
    hook_id: number,
    config?: OrgsUpdateHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type OrgsUpdateMembershipParams = {
    org: string,
    state: "active"
  };
  declare type ProjectsAddCollaboratorParams = {
    project_id: number,
    username: string,
    permission?: "read" | "write" | "admin"
  };
  declare type ProjectsCreateCardParams = {
    column_id: number,
    note?: string,
    content_id?: number,
    content_type?: string
  };
  declare type ProjectsCreateColumnParams = {
    project_id: number,
    name: string
  };
  declare type ProjectsCreateForOrgParams = {
    org: string,
    name: string,
    body?: string,
    per_page?: number,
    page?: number
  };
  declare type ProjectsCreateForRepoParams = {
    owner: string,
    repo: string,
    name: string,
    body?: string,
    per_page?: number,
    page?: number
  };
  declare type ProjectsDeleteParams = {
    project_id: number
  };
  declare type ProjectsDeleteCardParams = {
    card_id: number
  };
  declare type ProjectsDeleteColumnParams = {
    column_id: number
  };
  declare type ProjectsGetParams = {
    project_id: number,
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetCardParams = {
    card_id: number
  };
  declare type ProjectsGetColumnParams = {
    column_id: number
  };
  declare type ProjectsListCardsParams = {
    column_id: number,
    archived_state?: "all" | "archived" | "not_archived",
    per_page?: number,
    page?: number
  };
  declare type ProjectsListCollaboratorsParams = {
    project_id: number,
    affiliation?: "outside" | "direct" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsListColumnsParams = {
    project_id: number,
    per_page?: number,
    page?: number
  };
  declare type ProjectsListForOrgParams = {
    org: string,
    state?: "open" | "closed" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsListForRepoParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsMoveCardParams = {
    card_id: number,
    position: string,
    column_id?: number
  };
  declare type ProjectsMoveColumnParams = {
    column_id: number,
    position: string
  };
  declare type ProjectsRemoveCollaboratorParams = {
    project_id: number,
    username: string
  };
  declare type ProjectsReviewUserPermissionLevelParams = {
    project_id: number,
    username: string
  };
  declare type ProjectsUpdateParams = {
    project_id: number,
    name?: string,
    body?: string,
    state?: "open" | "closed",
    organization_permission?: string,
    public?: boolean,
    per_page?: number,
    page?: number
  };
  declare type ProjectsUpdateCardParams = {
    card_id: number,
    note?: string,
    archived?: boolean
  };
  declare type ProjectsUpdateColumnParams = {
    column_id: number,
    name: string
  };
  declare type PullRequestsCheckIfMergedParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type PullRequestsCreateParams = {
    owner: string,
    repo: string,
    title: string,
    head: string,
    base: string,
    body?: string,
    maintainer_can_modify?: boolean
  };
  declare type PullRequestsCreateCommentParams = {
    owner: string,
    repo: string,
    number: number,
    body: string,
    commit_id: string,
    path: string,
    position: number
  };
  declare type PullRequestsCreateCommentReplyParams = {
    owner: string,
    repo: string,
    number: number,
    body: string,
    in_reply_to: number
  };
  declare type PullRequestsCreateFromIssueParams = {
    owner: string,
    repo: string,
    issue: number,
    head: string,
    base: string,
    maintainer_can_modify?: boolean
  };
  declare type PullRequestsCreateReviewParams = {
    owner: string,
    repo: string,
    number: number,
    commit_id?: string,
    body?: string,
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT",
    comments?: PullRequestsCreateReviewParamsComments[]
  };
  declare type PullRequestsCreateReviewRequestParams = {
    owner: string,
    repo: string,
    number: number,
    reviewers?: string[],
    team_reviewers?: string[]
  };
  declare type PullRequestsDeleteCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type PullRequestsDeletePendingReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number
  };
  declare type PullRequestsDeleteReviewRequestParams = {
    owner: string,
    repo: string,
    number: number,
    reviewers?: string[],
    team_reviewers?: string[]
  };
  declare type PullRequestsDismissReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    message: string
  };
  declare type PullRequestsGetParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type PullRequestsGetCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type PullRequestsGetCommentsForReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number
  };
  declare type PullRequestsListParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    head?: string,
    base?: string,
    sort?: "created" | "updated" | "popularity" | "long-running",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListCommentsParams = {
    owner: string,
    repo: string,
    number: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListCommentsForRepoParams = {
    owner: string,
    repo: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListCommitsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListFilesParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListReviewRequestsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsListReviewsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsMergeParams = {
    owner: string,
    repo: string,
    number: number,
    commit_title?: string,
    commit_message?: string,
    sha?: string,
    merge_method?: "merge" | "squash" | "rebase"
  };
  declare type PullRequestsSubmitReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    body?: string,
    event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
  };
  declare type PullRequestsUpdateParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    body?: string,
    state?: "open" | "closed",
    base?: string,
    maintainer_can_modify?: boolean
  };
  declare type PullRequestsUpdateCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type ReactionsCreateForCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForIssueParams = {
    owner: string,
    repo: string,
    number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForIssueCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForPullRequestReviewCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForTeamDiscussionParams = {
    team_id: number,
    discussion_number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForTeamDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsDeleteParams = {
    reaction_id: number
  };
  declare type ReactionsListForCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsListForIssueParams = {
    owner: string,
    repo: string,
    number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsListForIssueCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsListForPullRequestReviewCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsListForTeamDiscussionParams = {
    team_id: number,
    discussion_number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsListForTeamDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReposAcceptInvitationParams = {
    invitation_id: number
  };
  declare type ReposAddCollaboratorParams = {
    owner: string,
    repo: string,
    username: string,
    permission?: "pull" | "push" | "admin"
  };
  declare type ReposAddDeployKeyParams = {
    owner: string,
    repo: string,
    title?: string,
    key: string,
    read_only?: boolean
  };
  declare type ReposAddProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposAddProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposAddProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposAddProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposAddProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposCheckCollaboratorParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposCompareCommitsParams = {
    owner: string,
    repo: string,
    base: string,
    head: string
  };
  declare type ReposCreateCommitCommentParams = {
    owner: string,
    repo: string,
    sha: string,
    body: string,
    path?: string,
    position?: number,
    line?: number
  };
  declare type ReposCreateDeploymentParams = {
    owner: string,
    repo: string,
    ref: string,
    task?: string,
    auto_merge?: boolean,
    required_contexts?: string[],
    payload?: string,
    environment?: string,
    description?: string,
    transient_environment?: boolean,
    production_environment?: boolean
  };
  declare type ReposCreateDeploymentStatusParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    state:
      | "error"
      | "failure"
      | "inactive"
      | "in_progress"
      | "queued"
      | "pending"
      | "success",
    target_url?: string,
    log_url?: string,
    description?: string,
    environment?: "production" | "staging" | "qa",
    environment_url?: string,
    auto_inactive?: boolean
  };
  declare type ReposCreateFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    content: string,
    branch?: string,
    committer?: ReposCreateFileParamsCommitter,
    author?: ReposCreateFileParamsAuthor
  };
  declare type ReposCreateForAuthenticatedUserParams = {
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    team_id?: number,
    auto_init?: boolean,
    gitignore_template?: string,
    license_template?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean
  };
  declare type ReposCreateForkParams = {
    owner: string,
    repo: string,
    organization?: string
  };
  declare type ReposCreateHookParams = {
    owner: string,
    repo: string,
    name: string,
    config: ReposCreateHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type ReposCreateInOrgParams = {
    org: string,
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    team_id?: number,
    auto_init?: boolean,
    gitignore_template?: string,
    license_template?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean
  };
  declare type ReposCreateReleaseParams = {
    owner: string,
    repo: string,
    tag_name: string,
    target_commitish?: string,
    name?: string,
    body?: string,
    draft?: boolean,
    prerelease?: boolean
  };
  declare type ReposCreateStatusParams = {
    owner: string,
    repo: string,
    sha: string,
    state: "error" | "failure" | "pending" | "success",
    target_url?: string,
    description?: string,
    context?: string
  };
  declare type ReposDeclineInvitationParams = {
    invitation_id: number
  };
  declare type ReposDeleteParams = {
    owner: string,
    repo: string
  };
  declare type ReposDeleteCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type ReposDeleteDownloadParams = {
    owner: string,
    repo: string,
    download_id: number
  };
  declare type ReposDeleteFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    sha: string,
    branch?: string,
    committer?: ReposDeleteFileParamsCommitter,
    author?: ReposDeleteFileParamsAuthor
  };
  declare type ReposDeleteHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposDeleteInvitationParams = {
    owner: string,
    repo: string,
    invitation_id: number
  };
  declare type ReposDeleteReleaseParams = {
    owner: string,
    repo: string,
    release_id: number
  };
  declare type ReposDeleteReleaseAssetParams = {
    owner: string,
    repo: string,
    asset_id: number
  };
  declare type ReposGetParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetArchiveLinkParams = {
    owner: string,
    repo: string,
    archive_format: string,
    ref: string
  };
  declare type ReposGetBranchParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetClonesParams = {
    owner: string,
    repo: string,
    per?: "day" | "week"
  };
  declare type ReposGetCodeFrequencyStatsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetCollaboratorPermissionLevelParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposGetCombinedStatusForRefParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type ReposGetCommitParams = {
    owner: string,
    repo: string,
    sha: string
  };
  declare type ReposGetCommitActivityStatsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type ReposGetCommitRefShaParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type ReposGetContentsParams = {
    owner: string,
    repo: string,
    path: string,
    ref?: string
  };
  declare type ReposGetContributorsStatsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetDeployKeyParams = {
    owner: string,
    repo: string,
    key_id: number
  };
  declare type ReposGetDeploymentParams = {
    owner: string,
    repo: string,
    deployment_id: number
  };
  declare type ReposGetDeploymentStatusParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    status_id: number
  };
  declare type ReposGetDownloadParams = {
    owner: string,
    repo: string,
    download_id: number
  };
  declare type ReposGetHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposGetLatestPagesBuildParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetLatestReleaseParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetPagesParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetPagesBuildParams = {
    owner: string,
    repo: string,
    build_id: number
  };
  declare type ReposGetParticipationStatsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetPunchCardStatsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetReadmeParams = {
    owner: string,
    repo: string,
    ref?: string
  };
  declare type ReposGetReleaseParams = {
    owner: string,
    repo: string,
    release_id: number
  };
  declare type ReposGetReleaseAssetParams = {
    owner: string,
    repo: string,
    asset_id: number
  };
  declare type ReposGetReleaseByTagParams = {
    owner: string,
    repo: string,
    tag: string
  };
  declare type ReposGetTopPathsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetTopReferrersParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetViewsParams = {
    owner: string,
    repo: string,
    per?: "day" | "week"
  };
  declare type ReposListParams = {
    visibility?: "all" | "public" | "private",
    affiliation?: "owner" | "collaborator" | "organization_member",
    type?: "all" | "owner" | "public" | "private" | "member",
    sort?: "created" | "updated" | "pushed" | "full_name",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ReposListAssetsForReleaseParams = {
    owner: string,
    repo: string,
    release_id: number,
    per_page?: number,
    page?: number
  };
  declare type ReposListBranchesParams = {
    owner: string,
    repo: string,
    protected?: boolean,
    per_page?: number,
    page?: number
  };
  declare type ReposListCollaboratorsParams = {
    owner: string,
    repo: string,
    affiliation?: "outside" | "direct" | "all",
    per_page?: number,
    page?: number
  };
  declare type ReposListCommentsForCommitParams = {
    owner: string,
    repo: string,
    ref: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListCommitCommentsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListCommitsParams = {
    owner: string,
    repo: string,
    sha?: string,
    path?: string,
    author?: string,
    since?: string,
    until?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListContributorsParams = {
    owner: string,
    repo: string,
    anon?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListDeployKeysParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListDeploymentStatusesParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    per_page?: number,
    page?: number
  };
  declare type ReposListDeploymentsParams = {
    owner: string,
    repo: string,
    sha?: string,
    ref?: string,
    task?: string,
    environment?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListDownloadsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListForOrgParams = {
    org: string,
    type?: "all" | "public" | "private" | "forks" | "sources" | "member",
    per_page?: number,
    page?: number
  };
  declare type ReposListForUserParams = {
    username: string,
    type?: "all" | "owner" | "member",
    sort?: "created" | "updated" | "pushed" | "full_name",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ReposListForksParams = {
    owner: string,
    repo: string,
    sort?: "newest" | "oldest" | "stargazers",
    per_page?: number,
    page?: number
  };
  declare type ReposListHooksParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListInvitationsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListInvitationsForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type ReposListLanguagesParams = {
    owner: string,
    repo: string
  };
  declare type ReposListPagesBuildsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposListProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposListPublicParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListReleasesParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListStatusesForRefParams = {
    owner: string,
    repo: string,
    ref: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListTagsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListTeamsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposListTopicsParams = {
    owner: string,
    repo: string
  };
  declare type ReposMergeParams = {
    owner: string,
    repo: string,
    base: string,
    head: string,
    commit_message?: string
  };
  declare type ReposPingHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposRemoveBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveCollaboratorParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposRemoveDeployKeyParams = {
    owner: string,
    repo: string,
    key_id: number
  };
  declare type ReposRemoveProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposRemoveProtectedBranchRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposRemoveProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposReplaceProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposReplaceProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposReplaceProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposReplaceTopicsParams = {
    owner: string,
    repo: string,
    names: string[]
  };
  declare type ReposRequestPageBuildParams = {
    owner: string,
    repo: string
  };
  declare type ReposRetrieveCommunityProfileMetricsParams = {
    owner: string,
    repo: string
  };
  declare type ReposTestPushHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposTransferParams = {
    owner: string,
    repo: string,
    new_owner?: string,
    team_ids?: number[]
  };
  declare type ReposUpdateParams = {
    owner: string,
    repo: string,
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    default_branch?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean,
    archived?: boolean
  };
  declare type ReposUpdateBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string,
    required_status_checks: ReposUpdateBranchProtectionParamsRequiredStatusChecks,
    enforce_admins: boolean,
    required_pull_request_reviews: ReposUpdateBranchProtectionParamsRequiredPullRequestReviews,
    restrictions: ReposUpdateBranchProtectionParamsRestrictions
  };
  declare type ReposUpdateCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type ReposUpdateFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    content: string,
    sha: string,
    branch?: string,
    committer?: ReposUpdateFileParamsCommitter,
    author?: ReposUpdateFileParamsAuthor
  };
  declare type ReposUpdateHookParams = {
    owner: string,
    repo: string,
    hook_id: number,
    config?: ReposUpdateHookParamsConfig,
    events?: string[],
    add_events?: string[],
    remove_events?: string[],
    active?: boolean
  };
  declare type ReposUpdateInformationAboutPagesSiteParams = {
    owner: string,
    repo: string,
    cname?: string,
    source?: '"gh-pages"' | '"master"' | '"master /docs"'
  };
  declare type ReposUpdateInvitationParams = {
    owner: string,
    repo: string,
    invitation_id: number,
    permissions?: "read" | "write" | "admin"
  };
  declare type ReposUpdateProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string,
    dismissal_restrictions?: ReposUpdateProtectedBranchPullRequestReviewEnforcementParamsDismissalRestrictions,
    dismiss_stale_reviews?: boolean,
    require_code_owner_reviews?: boolean,
    required_approving_review_count?: number
  };
  declare type ReposUpdateProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string,
    strict?: boolean,
    contexts?: string[]
  };
  declare type ReposUpdateReleaseParams = {
    owner: string,
    repo: string,
    release_id: number,
    tag_name?: string,
    target_commitish?: string,
    name?: string,
    body?: string,
    draft?: boolean,
    prerelease?: boolean
  };
  declare type ReposUpdateReleaseAssetParams = {
    owner: string,
    repo: string,
    asset_id: number,
    name?: string,
    label?: string
  };
  declare type ReposUploadReleaseAssetParams = {
    url: string,
    "Content-Length": number,
    "Content-Type": string,
    name: string,
    label?: string,
    file: string | object
  };
  declare type SearchCodeParams = {
    q: string,
    sort?: "indexed",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchCommitsParams = {
    q: string,
    sort?: "author-date" | "committer-date",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchIssuesParams = {
    q: string,
    sort?: "comments" | "created" | "updated",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchLabelsParams = {
    repository_id: number,
    q: string,
    sort?: "created" | "updated",
    order?: "asc" | "desc"
  };
  declare type SearchReposParams = {
    q: string,
    sort?: "stars" | "forks" | "updated",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchTopicsParams = {
    q: string
  };
  declare type SearchUsersParams = {
    q: string,
    sort?: "followers" | "repositories" | "joined",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type TeamsAddMemberParams = {
    team_id: number,
    username: string
  };
  declare type TeamsAddOrUpdateMembershipParams = {
    team_id: number,
    username: string,
    role?: "member" | "maintainer"
  };
  declare type TeamsAddOrUpdateProjectParams = {
    team_id: number,
    project_id: number,
    permission?: "read" | "write" | "admin"
  };
  declare type TeamsAddOrUpdateRepoParams = {
    team_id: number,
    owner: string,
    repo: string,
    permission?: "pull" | "push" | "admin"
  };
  declare type TeamsCheckManagesRepoParams = {
    team_id: number,
    owner: string,
    repo: string
  };
  declare type TeamsCreateParams = {
    org: string,
    name: string,
    description?: string,
    maintainers?: string[],
    repo_names?: string[],
    privacy?: "secret" | "closed",
    permission?: "pull" | "push" | "admin",
    parent_team_id?: number
  };
  declare type TeamsCreateDiscussionParams = {
    team_id: number,
    title: string,
    body: string,
    private?: boolean
  };
  declare type TeamsCreateDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    body: string
  };
  declare type TeamsDeleteParams = {
    team_id: number
  };
  declare type TeamsDeleteDiscussionParams = {
    team_id: number,
    discussion_number: number
  };
  declare type TeamsDeleteDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number
  };
  declare type TeamsGetParams = {
    team_id: number
  };
  declare type TeamsGetDiscussionParams = {
    team_id: number,
    discussion_number: number
  };
  declare type TeamsGetDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number
  };
  declare type TeamsGetMemberParams = {
    team_id: number,
    username: string
  };
  declare type TeamsGetMembershipParams = {
    team_id: number,
    username: string
  };
  declare type TeamsListParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type TeamsListChildParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type TeamsListDiscussionCommentsParams = {
    team_id: number,
    discussion_number: number,
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type TeamsListDiscussionsParams = {
    team_id: number,
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type TeamsListForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type TeamsListMembersParams = {
    team_id: number,
    role?: "member" | "maintainer" | "all",
    per_page?: number,
    page?: number
  };
  declare type TeamsListPendingInvitationsParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type TeamsListProjectsParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type TeamsListReposParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type TeamsRemoveMemberParams = {
    team_id: number,
    username: string
  };
  declare type TeamsRemoveMembershipParams = {
    team_id: number,
    username: string
  };
  declare type TeamsRemoveProjectParams = {
    team_id: number,
    project_id: number
  };
  declare type TeamsRemoveRepoParams = {
    team_id: number,
    owner: string,
    repo: string
  };
  declare type TeamsReviewProjectParams = {
    team_id: number,
    project_id: number
  };
  declare type TeamsUpdateParams = {
    team_id: number,
    name: string,
    description?: string,
    privacy?: string,
    permission?: "pull" | "push" | "admin",
    parent_team_id?: number
  };
  declare type TeamsUpdateDiscussionParams = {
    team_id: number,
    discussion_number: number,
    title?: string,
    body?: string
  };
  declare type TeamsUpdateDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number,
    body: string
  };
  declare type UsersAddEmailsParams = {
    emails: string[]
  };
  declare type UsersBlockParams = {
    username: string
  };
  declare type UsersCheckBlockedParams = {
    username: string
  };
  declare type UsersCheckFollowingParams = {
    username: string
  };
  declare type UsersCheckFollowingForUserParams = {
    username: string,
    target_user: string
  };
  declare type UsersCreateGpgKeyParams = {
    armored_public_key?: string
  };
  declare type UsersCreatePublicKeyParams = {
    title?: string,
    key?: string
  };
  declare type UsersDeleteEmailsParams = {
    emails: string[]
  };
  declare type UsersDeleteGpgKeyParams = {
    gpg_key_id: number
  };
  declare type UsersDeletePublicKeyParams = {
    key_id: number
  };
  declare type UsersFollowParams = {
    username: string
  };
  declare type UsersGetByUsernameParams = {
    username: string
  };
  declare type UsersGetContextForUserParams = {
    username: string,
    subject_type?: "organization" | "repository" | "issue" | "pull_request",
    subject_id?: string
  };
  declare type UsersGetGpgKeyParams = {
    gpg_key_id: number
  };
  declare type UsersGetPublicKeyParams = {
    key_id: number
  };
  declare type UsersListParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type UsersListEmailsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListFollowersForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListFollowersForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersListFollowingForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListFollowingForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersListGpgKeysParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListGpgKeysForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersListPublicEmailsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListPublicKeysParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersListPublicKeysForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersTogglePrimaryEmailVisibilityParams = {
    email: string,
    visibility: string
  };
  declare type UsersUnblockParams = {
    username: string
  };
  declare type UsersUnfollowParams = {
    username: string
  };
  declare type UsersUpdateAuthenticatedParams = {
    name?: string,
    email?: string,
    blog?: string,
    company?: string,
    location?: string,
    hireable?: boolean,
    bio?: string
  };

  declare class Github {
    constructor(options?: Options): Github;
    authenticate(auth: Auth): void;
    hasNextPage(link: Link): ?string;
    hasPreviousPage(link: Link): ?string;
    hasLastPage(link: Link): ?string;
    hasFirstPage(link: Link): ?string;
    getNextPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getPreviousPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getLastPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getFirstPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    activity: {
      checkStarringRepo(
        params: ActivityCheckStarringRepoParams,
        callback?: Callback
      ): Promise<any>,
      deleteRepoSubscription(
        params: ActivityDeleteRepoSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      deleteThreadSubscription(
        params: ActivityDeleteThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      getRepoSubscription(
        params: ActivityGetRepoSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      getThread(
        params: ActivityGetThreadParams,
        callback?: Callback
      ): Promise<any>,
      getThreadSubscription(
        params: ActivityGetThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      listEventsForOrg(
        params: ActivityListEventsForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listEventsForUser(
        params: ActivityListEventsForUserParams,
        callback?: Callback
      ): Promise<any>,
      listFeeds(params: EmptyParams, callback?: Callback): Promise<any>,
      listNotifications(
        params: ActivityListNotificationsParams,
        callback?: Callback
      ): Promise<any>,
      listNotificationsForRepo(
        params: ActivityListNotificationsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listPublicEvents(
        params: ActivityListPublicEventsParams,
        callback?: Callback
      ): Promise<any>,
      listPublicEventsForOrg(
        params: ActivityListPublicEventsForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listPublicEventsForRepoNetwork(
        params: ActivityListPublicEventsForRepoNetworkParams,
        callback?: Callback
      ): Promise<any>,
      listPublicEventsForUser(
        params: ActivityListPublicEventsForUserParams,
        callback?: Callback
      ): Promise<any>,
      listReceivedEventsForUser(
        params: ActivityListReceivedEventsForUserParams,
        callback?: Callback
      ): Promise<any>,
      listReceivedPublicEventsForUser(
        params: ActivityListReceivedPublicEventsForUserParams,
        callback?: Callback
      ): Promise<any>,
      listRepoEvents(
        params: ActivityListRepoEventsParams,
        callback?: Callback
      ): Promise<any>,
      listReposStarredByAuthenticatedUser(
        params: ActivityListReposStarredByAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listReposStarredByUser(
        params: ActivityListReposStarredByUserParams,
        callback?: Callback
      ): Promise<any>,
      listReposWatchedByUser(
        params: ActivityListReposWatchedByUserParams,
        callback?: Callback
      ): Promise<any>,
      listStargazersForRepo(
        params: ActivityListStargazersForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listWatchedReposForAuthenticatedUser(
        params: ActivityListWatchedReposForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listWatchersForRepo(
        params: ActivityListWatchersForRepoParams,
        callback?: Callback
      ): Promise<any>,
      markAsRead(
        params: ActivityMarkAsReadParams,
        callback?: Callback
      ): Promise<any>,
      markNotificationsAsReadForRepo(
        params: ActivityMarkNotificationsAsReadForRepoParams,
        callback?: Callback
      ): Promise<any>,
      markThreadAsRead(
        params: ActivityMarkThreadAsReadParams,
        callback?: Callback
      ): Promise<any>,
      setRepoSubscription(
        params: ActivitySetRepoSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      setThreadSubscription(
        params: ActivitySetThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      starRepo(
        params: ActivityStarRepoParams,
        callback?: Callback
      ): Promise<any>,
      unstarRepo(
        params: ActivityUnstarRepoParams,
        callback?: Callback
      ): Promise<any>
    };
    apps: {
      addRepoToInstallation(
        params: AppsAddRepoToInstallationParams,
        callback?: Callback
      ): Promise<any>,
      checkAccountIsAssociatedWithAny(
        params: AppsCheckAccountIsAssociatedWithAnyParams,
        callback?: Callback
      ): Promise<any>,
      checkAccountIsAssociatedWithAnyStubbed(
        params: AppsCheckAccountIsAssociatedWithAnyStubbedParams,
        callback?: Callback
      ): Promise<any>,
      createFromManifest(
        params: AppsCreateFromManifestParams,
        callback?: Callback
      ): Promise<any>,
      createInstallationToken(
        params: AppsCreateInstallationTokenParams,
        callback?: Callback
      ): Promise<any>,
      findOrgInstallation(
        params: AppsFindOrgInstallationParams,
        callback?: Callback
      ): Promise<any>,
      findRepoInstallation(
        params: AppsFindRepoInstallationParams,
        callback?: Callback
      ): Promise<any>,
      findUserInstallation(
        params: AppsFindUserInstallationParams,
        callback?: Callback
      ): Promise<any>,
      getAuthenticated(params: EmptyParams, callback?: Callback): Promise<any>,
      getBySlug(params: AppsGetBySlugParams, callback?: Callback): Promise<any>,
      getInstallation(
        params: AppsGetInstallationParams,
        callback?: Callback
      ): Promise<any>,
      listAccountsUserOrOrgOnPlan(
        params: AppsListAccountsUserOrOrgOnPlanParams,
        callback?: Callback
      ): Promise<any>,
      listAccountsUserOrOrgOnPlanStubbed(
        params: AppsListAccountsUserOrOrgOnPlanStubbedParams,
        callback?: Callback
      ): Promise<any>,
      listInstallationReposForAuthenticatedUser(
        params: AppsListInstallationReposForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listInstallations(
        params: AppsListInstallationsParams,
        callback?: Callback
      ): Promise<any>,
      listInstallationsForAuthenticatedUser(
        params: AppsListInstallationsForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listMarketplacePurchasesForAuthenticatedUser(
        params: AppsListMarketplacePurchasesForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listMarketplacePurchasesForAuthenticatedUserStubbed(
        params: AppsListMarketplacePurchasesForAuthenticatedUserStubbedParams,
        callback?: Callback
      ): Promise<any>,
      listPlans(params: AppsListPlansParams, callback?: Callback): Promise<any>,
      listPlansStubbed(
        params: AppsListPlansStubbedParams,
        callback?: Callback
      ): Promise<any>,
      listRepos(params: AppsListReposParams, callback?: Callback): Promise<any>,
      removeRepoFromInstallation(
        params: AppsRemoveRepoFromInstallationParams,
        callback?: Callback
      ): Promise<any>
    };
    authorization: {
      checkAuthorization(
        params: AuthorizationCheckAuthorizationParams,
        callback?: Callback
      ): Promise<any>,
      createAuthorization(
        params: AuthorizationCreateAuthorizationParams,
        callback?: Callback
      ): Promise<any>,
      deleteAuthorization(
        params: AuthorizationDeleteAuthorizationParams,
        callback?: Callback
      ): Promise<any>,
      deleteGrant(
        params: AuthorizationDeleteGrantParams,
        callback?: Callback
      ): Promise<any>,
      getAuthorization(
        params: AuthorizationGetAuthorizationParams,
        callback?: Callback
      ): Promise<any>,
      getGrant(
        params: AuthorizationGetGrantParams,
        callback?: Callback
      ): Promise<any>,
      getOrCreateAuthorizationForApp(
        params: AuthorizationGetOrCreateAuthorizationForAppParams,
        callback?: Callback
      ): Promise<any>,
      getOrCreateAuthorizationForAppFingerprint(
        params: AuthorizationGetOrCreateAuthorizationForAppFingerprintParams,
        callback?: Callback
      ): Promise<any>,
      listAuthorizations(
        params: AuthorizationListAuthorizationsParams,
        callback?: Callback
      ): Promise<any>,
      listGrants(
        params: AuthorizationListGrantsParams,
        callback?: Callback
      ): Promise<any>,
      resetAuthorization(
        params: AuthorizationResetAuthorizationParams,
        callback?: Callback
      ): Promise<any>,
      revokeAuthorizationForApplication(
        params: AuthorizationRevokeAuthorizationForApplicationParams,
        callback?: Callback
      ): Promise<any>,
      revokeGrantForApplication(
        params: AuthorizationRevokeGrantForApplicationParams,
        callback?: Callback
      ): Promise<any>,
      updateAuthorization(
        params: AuthorizationUpdateAuthorizationParams,
        callback?: Callback
      ): Promise<any>
    };
    checks: {
      create(params: ChecksCreateParams, callback?: Callback): Promise<any>,
      createSuite(
        params: ChecksCreateSuiteParams,
        callback?: Callback
      ): Promise<any>,
      get(params: ChecksGetParams, callback?: Callback): Promise<any>,
      getSuite(params: ChecksGetSuiteParams, callback?: Callback): Promise<any>,
      listAnnotations(
        params: ChecksListAnnotationsParams,
        callback?: Callback
      ): Promise<any>,
      listForRef(
        params: ChecksListForRefParams,
        callback?: Callback
      ): Promise<any>,
      listForSuite(
        params: ChecksListForSuiteParams,
        callback?: Callback
      ): Promise<any>,
      listSuitesForRef(
        params: ChecksListSuitesForRefParams,
        callback?: Callback
      ): Promise<any>,
      rerequestSuite(
        params: ChecksRerequestSuiteParams,
        callback?: Callback
      ): Promise<any>,
      setSuitesPreferences(
        params: ChecksSetSuitesPreferencesParams,
        callback?: Callback
      ): Promise<any>,
      update(params: ChecksUpdateParams, callback?: Callback): Promise<any>
    };
    codesOfConduct: {
      getConductCode(
        params: CodesOfConductGetConductCodeParams,
        callback?: Callback
      ): Promise<any>,
      getForRepo(
        params: CodesOfConductGetForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listConductCodes(params: EmptyParams, callback?: Callback): Promise<any>
    };
    emojis: {
      get(params: EmptyParams, callback?: Callback): Promise<any>
    };
    gists: {
      checkIsStarred(
        params: GistsCheckIsStarredParams,
        callback?: Callback
      ): Promise<any>,
      create(params: GistsCreateParams, callback?: Callback): Promise<any>,
      createComment(
        params: GistsCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: GistsDeleteParams, callback?: Callback): Promise<any>,
      deleteComment(
        params: GistsDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      fork(params: GistsForkParams, callback?: Callback): Promise<any>,
      get(params: GistsGetParams, callback?: Callback): Promise<any>,
      getComment(
        params: GistsGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getRevision(
        params: GistsGetRevisionParams,
        callback?: Callback
      ): Promise<any>,
      list(params: GistsListParams, callback?: Callback): Promise<any>,
      listComments(
        params: GistsListCommentsParams,
        callback?: Callback
      ): Promise<any>,
      listCommits(
        params: GistsListCommitsParams,
        callback?: Callback
      ): Promise<any>,
      listForks(
        params: GistsListForksParams,
        callback?: Callback
      ): Promise<any>,
      listPublic(
        params: GistsListPublicParams,
        callback?: Callback
      ): Promise<any>,
      listPublicForUser(
        params: GistsListPublicForUserParams,
        callback?: Callback
      ): Promise<any>,
      listStarred(
        params: GistsListStarredParams,
        callback?: Callback
      ): Promise<any>,
      star(params: GistsStarParams, callback?: Callback): Promise<any>,
      unstar(params: GistsUnstarParams, callback?: Callback): Promise<any>,
      update(params: GistsUpdateParams, callback?: Callback): Promise<any>,
      updateComment(
        params: GistsUpdateCommentParams,
        callback?: Callback
      ): Promise<any>
    };
    gitdata: {
      createBlob(
        params: GitdataCreateBlobParams,
        callback?: Callback
      ): Promise<any>,
      createCommit(
        params: GitdataCreateCommitParams,
        callback?: Callback
      ): Promise<any>,
      createRef(
        params: GitdataCreateRefParams,
        callback?: Callback
      ): Promise<any>,
      createTag(
        params: GitdataCreateTagParams,
        callback?: Callback
      ): Promise<any>,
      createTree(
        params: GitdataCreateTreeParams,
        callback?: Callback
      ): Promise<any>,
      deleteRef(
        params: GitdataDeleteRefParams,
        callback?: Callback
      ): Promise<any>,
      getBlob(params: GitdataGetBlobParams, callback?: Callback): Promise<any>,
      getCommit(
        params: GitdataGetCommitParams,
        callback?: Callback
      ): Promise<any>,
      getRef(params: GitdataGetRefParams, callback?: Callback): Promise<any>,
      getTag(params: GitdataGetTagParams, callback?: Callback): Promise<any>,
      getTree(params: GitdataGetTreeParams, callback?: Callback): Promise<any>,
      listRefs(
        params: GitdataListRefsParams,
        callback?: Callback
      ): Promise<any>,
      updateRef(
        params: GitdataUpdateRefParams,
        callback?: Callback
      ): Promise<any>
    };
    gitignore: {
      getTemplate(
        params: GitignoreGetTemplateParams,
        callback?: Callback
      ): Promise<any>,
      listTemplates(params: EmptyParams, callback?: Callback): Promise<any>
    };
    issues: {
      addAssignees(
        params: IssuesAddAssigneesParams,
        callback?: Callback
      ): Promise<any>,
      addLabels(
        params: IssuesAddLabelsParams,
        callback?: Callback
      ): Promise<any>,
      checkAssignee(
        params: IssuesCheckAssigneeParams,
        callback?: Callback
      ): Promise<any>,
      create(params: IssuesCreateParams, callback?: Callback): Promise<any>,
      createComment(
        params: IssuesCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      createLabel(
        params: IssuesCreateLabelParams,
        callback?: Callback
      ): Promise<any>,
      createMilestone(
        params: IssuesCreateMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      deleteComment(
        params: IssuesDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      deleteLabel(
        params: IssuesDeleteLabelParams,
        callback?: Callback
      ): Promise<any>,
      deleteMilestone(
        params: IssuesDeleteMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      get(params: IssuesGetParams, callback?: Callback): Promise<any>,
      getComment(
        params: IssuesGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getEvent(params: IssuesGetEventParams, callback?: Callback): Promise<any>,
      getLabel(params: IssuesGetLabelParams, callback?: Callback): Promise<any>,
      getMilestone(
        params: IssuesGetMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      list(params: IssuesListParams, callback?: Callback): Promise<any>,
      listAssignees(
        params: IssuesListAssigneesParams,
        callback?: Callback
      ): Promise<any>,
      listComments(
        params: IssuesListCommentsParams,
        callback?: Callback
      ): Promise<any>,
      listCommentsForRepo(
        params: IssuesListCommentsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listEvents(
        params: IssuesListEventsParams,
        callback?: Callback
      ): Promise<any>,
      listEventsForRepo(
        params: IssuesListEventsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listEventsForTimeline(
        params: IssuesListEventsForTimelineParams,
        callback?: Callback
      ): Promise<any>,
      listForAuthenticatedUser(
        params: IssuesListForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listForOrg(
        params: IssuesListForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listForRepo(
        params: IssuesListForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listLabelsForMilestone(
        params: IssuesListLabelsForMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      listLabelsForRepo(
        params: IssuesListLabelsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listLabelsOnIssue(
        params: IssuesListLabelsOnIssueParams,
        callback?: Callback
      ): Promise<any>,
      listMilestonesForRepo(
        params: IssuesListMilestonesForRepoParams,
        callback?: Callback
      ): Promise<any>,
      lock(params: IssuesLockParams, callback?: Callback): Promise<any>,
      removeAssignees(
        params: IssuesRemoveAssigneesParams,
        callback?: Callback
      ): Promise<any>,
      removeLabel(
        params: IssuesRemoveLabelParams,
        callback?: Callback
      ): Promise<any>,
      removeLabels(
        params: IssuesRemoveLabelsParams,
        callback?: Callback
      ): Promise<any>,
      replaceLabels(
        params: IssuesReplaceLabelsParams,
        callback?: Callback
      ): Promise<any>,
      unlock(params: IssuesUnlockParams, callback?: Callback): Promise<any>,
      update(params: IssuesUpdateParams, callback?: Callback): Promise<any>,
      updateComment(
        params: IssuesUpdateCommentParams,
        callback?: Callback
      ): Promise<any>,
      updateLabel(
        params: IssuesUpdateLabelParams,
        callback?: Callback
      ): Promise<any>,
      updateMilestone(
        params: IssuesUpdateMilestoneParams,
        callback?: Callback
      ): Promise<any>
    };
    licenses: {
      get(params: LicensesGetParams, callback?: Callback): Promise<any>,
      getForRepo(
        params: LicensesGetForRepoParams,
        callback?: Callback
      ): Promise<any>,
      list(params: EmptyParams, callback?: Callback): Promise<any>
    };
    markdown: {
      render(params: MarkdownRenderParams, callback?: Callback): Promise<any>,
      renderRaw(
        params: MarkdownRenderRawParams,
        callback?: Callback
      ): Promise<any>
    };
    meta: {
      get(params: EmptyParams, callback?: Callback): Promise<any>
    };
    migrations: {
      cancelImport(
        params: MigrationsCancelImportParams,
        callback?: Callback
      ): Promise<any>,
      deleteArchiveForAuthenticatedUser(
        params: MigrationsDeleteArchiveForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      deleteArchiveForOrg(
        params: MigrationsDeleteArchiveForOrgParams,
        callback?: Callback
      ): Promise<any>,
      getArchiveForAuthenticatedUser(
        params: MigrationsGetArchiveForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      getArchiveForOrg(
        params: MigrationsGetArchiveForOrgParams,
        callback?: Callback
      ): Promise<any>,
      getCommitAuthors(
        params: MigrationsGetCommitAuthorsParams,
        callback?: Callback
      ): Promise<any>,
      getImportProgress(
        params: MigrationsGetImportProgressParams,
        callback?: Callback
      ): Promise<any>,
      getLargeFiles(
        params: MigrationsGetLargeFilesParams,
        callback?: Callback
      ): Promise<any>,
      getStatusForAuthenticatedUser(
        params: MigrationsGetStatusForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      getStatusForOrg(
        params: MigrationsGetStatusForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listForAuthenticatedUser(
        params: MigrationsListForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listForOrg(
        params: MigrationsListForOrgParams,
        callback?: Callback
      ): Promise<any>,
      mapCommitAuthor(
        params: MigrationsMapCommitAuthorParams,
        callback?: Callback
      ): Promise<any>,
      setLfsPreference(
        params: MigrationsSetLfsPreferenceParams,
        callback?: Callback
      ): Promise<any>,
      startForAuthenticatedUser(
        params: MigrationsStartForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      startForOrg(
        params: MigrationsStartForOrgParams,
        callback?: Callback
      ): Promise<any>,
      startImport(
        params: MigrationsStartImportParams,
        callback?: Callback
      ): Promise<any>,
      unlockRepoForAuthenticatedUser(
        params: MigrationsUnlockRepoForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      unlockRepoForOrg(
        params: MigrationsUnlockRepoForOrgParams,
        callback?: Callback
      ): Promise<any>,
      updateImport(
        params: MigrationsUpdateImportParams,
        callback?: Callback
      ): Promise<any>
    };
    misc: {};
    orgs: {
      addOrUpdateMembership(
        params: OrgsAddOrUpdateMembershipParams,
        callback?: Callback
      ): Promise<any>,
      blockUser(params: OrgsBlockUserParams, callback?: Callback): Promise<any>,
      checkBlockedUser(
        params: OrgsCheckBlockedUserParams,
        callback?: Callback
      ): Promise<any>,
      checkMembership(
        params: OrgsCheckMembershipParams,
        callback?: Callback
      ): Promise<any>,
      checkPublicMembership(
        params: OrgsCheckPublicMembershipParams,
        callback?: Callback
      ): Promise<any>,
      concealMembership(
        params: OrgsConcealMembershipParams,
        callback?: Callback
      ): Promise<any>,
      convertMemberToOutsideCollaborator(
        params: OrgsConvertMemberToOutsideCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      createHook(
        params: OrgsCreateHookParams,
        callback?: Callback
      ): Promise<any>,
      createInvitation(
        params: OrgsCreateInvitationParams,
        callback?: Callback
      ): Promise<any>,
      deleteHook(
        params: OrgsDeleteHookParams,
        callback?: Callback
      ): Promise<any>,
      get(params: OrgsGetParams, callback?: Callback): Promise<any>,
      getHook(params: OrgsGetHookParams, callback?: Callback): Promise<any>,
      getMembership(
        params: OrgsGetMembershipParams,
        callback?: Callback
      ): Promise<any>,
      getMembershipForAuthenticatedUser(
        params: OrgsGetMembershipForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      list(params: OrgsListParams, callback?: Callback): Promise<any>,
      listBlockedUsers(
        params: OrgsListBlockedUsersParams,
        callback?: Callback
      ): Promise<any>,
      listForAuthenticatedUser(
        params: OrgsListForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listForUser(
        params: OrgsListForUserParams,
        callback?: Callback
      ): Promise<any>,
      listHooks(params: OrgsListHooksParams, callback?: Callback): Promise<any>,
      listInvitationTeams(
        params: OrgsListInvitationTeamsParams,
        callback?: Callback
      ): Promise<any>,
      listMembers(
        params: OrgsListMembersParams,
        callback?: Callback
      ): Promise<any>,
      listMemberships(
        params: OrgsListMembershipsParams,
        callback?: Callback
      ): Promise<any>,
      listOutsideCollaborators(
        params: OrgsListOutsideCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      listPendingInvitations(
        params: OrgsListPendingInvitationsParams,
        callback?: Callback
      ): Promise<any>,
      listPublicMembers(
        params: OrgsListPublicMembersParams,
        callback?: Callback
      ): Promise<any>,
      pingHook(params: OrgsPingHookParams, callback?: Callback): Promise<any>,
      publicizeMembership(
        params: OrgsPublicizeMembershipParams,
        callback?: Callback
      ): Promise<any>,
      removeMember(
        params: OrgsRemoveMemberParams,
        callback?: Callback
      ): Promise<any>,
      removeMembership(
        params: OrgsRemoveMembershipParams,
        callback?: Callback
      ): Promise<any>,
      removeOutsideCollaborator(
        params: OrgsRemoveOutsideCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      unblockUser(
        params: OrgsUnblockUserParams,
        callback?: Callback
      ): Promise<any>,
      update(params: OrgsUpdateParams, callback?: Callback): Promise<any>,
      updateHook(
        params: OrgsUpdateHookParams,
        callback?: Callback
      ): Promise<any>,
      updateMembership(
        params: OrgsUpdateMembershipParams,
        callback?: Callback
      ): Promise<any>
    };
    projects: {
      addCollaborator(
        params: ProjectsAddCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      createCard(
        params: ProjectsCreateCardParams,
        callback?: Callback
      ): Promise<any>,
      createColumn(
        params: ProjectsCreateColumnParams,
        callback?: Callback
      ): Promise<any>,
      createForOrg(
        params: ProjectsCreateForOrgParams,
        callback?: Callback
      ): Promise<any>,
      createForRepo(
        params: ProjectsCreateForRepoParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: ProjectsDeleteParams, callback?: Callback): Promise<any>,
      deleteCard(
        params: ProjectsDeleteCardParams,
        callback?: Callback
      ): Promise<any>,
      deleteColumn(
        params: ProjectsDeleteColumnParams,
        callback?: Callback
      ): Promise<any>,
      get(params: ProjectsGetParams, callback?: Callback): Promise<any>,
      getCard(params: ProjectsGetCardParams, callback?: Callback): Promise<any>,
      getColumn(
        params: ProjectsGetColumnParams,
        callback?: Callback
      ): Promise<any>,
      listCards(
        params: ProjectsListCardsParams,
        callback?: Callback
      ): Promise<any>,
      listCollaborators(
        params: ProjectsListCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      listColumns(
        params: ProjectsListColumnsParams,
        callback?: Callback
      ): Promise<any>,
      listForOrg(
        params: ProjectsListForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listForRepo(
        params: ProjectsListForRepoParams,
        callback?: Callback
      ): Promise<any>,
      moveCard(
        params: ProjectsMoveCardParams,
        callback?: Callback
      ): Promise<any>,
      moveColumn(
        params: ProjectsMoveColumnParams,
        callback?: Callback
      ): Promise<any>,
      removeCollaborator(
        params: ProjectsRemoveCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      reviewUserPermissionLevel(
        params: ProjectsReviewUserPermissionLevelParams,
        callback?: Callback
      ): Promise<any>,
      update(params: ProjectsUpdateParams, callback?: Callback): Promise<any>,
      updateCard(
        params: ProjectsUpdateCardParams,
        callback?: Callback
      ): Promise<any>,
      updateColumn(
        params: ProjectsUpdateColumnParams,
        callback?: Callback
      ): Promise<any>
    };
    pullRequests: {
      checkIfMerged(
        params: PullRequestsCheckIfMergedParams,
        callback?: Callback
      ): Promise<any>,
      create(
        params: PullRequestsCreateParams,
        callback?: Callback
      ): Promise<any>,
      createComment(
        params: PullRequestsCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      createCommentReply(
        params: PullRequestsCreateCommentReplyParams,
        callback?: Callback
      ): Promise<any>,
      createFromIssue(
        params: PullRequestsCreateFromIssueParams,
        callback?: Callback
      ): Promise<any>,
      createReview(
        params: PullRequestsCreateReviewParams,
        callback?: Callback
      ): Promise<any>,
      createReviewRequest(
        params: PullRequestsCreateReviewRequestParams,
        callback?: Callback
      ): Promise<any>,
      deleteComment(
        params: PullRequestsDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      deletePendingReview(
        params: PullRequestsDeletePendingReviewParams,
        callback?: Callback
      ): Promise<any>,
      deleteReviewRequest(
        params: PullRequestsDeleteReviewRequestParams,
        callback?: Callback
      ): Promise<any>,
      dismissReview(
        params: PullRequestsDismissReviewParams,
        callback?: Callback
      ): Promise<any>,
      get(params: PullRequestsGetParams, callback?: Callback): Promise<any>,
      getComment(
        params: PullRequestsGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getCommentsForReview(
        params: PullRequestsGetCommentsForReviewParams,
        callback?: Callback
      ): Promise<any>,
      getReview(
        params: PullRequestsGetReviewParams,
        callback?: Callback
      ): Promise<any>,
      list(params: PullRequestsListParams, callback?: Callback): Promise<any>,
      listComments(
        params: PullRequestsListCommentsParams,
        callback?: Callback
      ): Promise<any>,
      listCommentsForRepo(
        params: PullRequestsListCommentsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      listCommits(
        params: PullRequestsListCommitsParams,
        callback?: Callback
      ): Promise<any>,
      listFiles(
        params: PullRequestsListFilesParams,
        callback?: Callback
      ): Promise<any>,
      listReviewRequests(
        params: PullRequestsListReviewRequestsParams,
        callback?: Callback
      ): Promise<any>,
      listReviews(
        params: PullRequestsListReviewsParams,
        callback?: Callback
      ): Promise<any>,
      merge(params: PullRequestsMergeParams, callback?: Callback): Promise<any>,
      submitReview(
        params: PullRequestsSubmitReviewParams,
        callback?: Callback
      ): Promise<any>,
      update(
        params: PullRequestsUpdateParams,
        callback?: Callback
      ): Promise<any>,
      updateComment(
        params: PullRequestsUpdateCommentParams,
        callback?: Callback
      ): Promise<any>
    };
    rateLimit: {
      get(params: EmptyParams, callback?: Callback): Promise<any>
    };
    reactions: {
      createForCommitComment(
        params: ReactionsCreateForCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForIssue(
        params: ReactionsCreateForIssueParams,
        callback?: Callback
      ): Promise<any>,
      createForIssueComment(
        params: ReactionsCreateForIssueCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForPullRequestReviewComment(
        params: ReactionsCreateForPullRequestReviewCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForTeamDiscussion(
        params: ReactionsCreateForTeamDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      createForTeamDiscussionComment(
        params: ReactionsCreateForTeamDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: ReactionsDeleteParams, callback?: Callback): Promise<any>,
      listForCommitComment(
        params: ReactionsListForCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      listForIssue(
        params: ReactionsListForIssueParams,
        callback?: Callback
      ): Promise<any>,
      listForIssueComment(
        params: ReactionsListForIssueCommentParams,
        callback?: Callback
      ): Promise<any>,
      listForPullRequestReviewComment(
        params: ReactionsListForPullRequestReviewCommentParams,
        callback?: Callback
      ): Promise<any>,
      listForTeamDiscussion(
        params: ReactionsListForTeamDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      listForTeamDiscussionComment(
        params: ReactionsListForTeamDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>
    };
    repos: {
      acceptInvitation(
        params: ReposAcceptInvitationParams,
        callback?: Callback
      ): Promise<any>,
      addCollaborator(
        params: ReposAddCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      addDeployKey(
        params: ReposAddDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchAdminEnforcement(
        params: ReposAddProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchRequiredSignatures(
        params: ReposAddProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchRequiredStatusChecksContexts(
        params: ReposAddProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchTeamRestrictions(
        params: ReposAddProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchUserRestrictions(
        params: ReposAddProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      checkCollaborator(
        params: ReposCheckCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      compareCommits(
        params: ReposCompareCommitsParams,
        callback?: Callback
      ): Promise<any>,
      createCommitComment(
        params: ReposCreateCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      createDeployment(
        params: ReposCreateDeploymentParams,
        callback?: Callback
      ): Promise<any>,
      createDeploymentStatus(
        params: ReposCreateDeploymentStatusParams,
        callback?: Callback
      ): Promise<any>,
      createFile(
        params: ReposCreateFileParams,
        callback?: Callback
      ): Promise<any>,
      createForAuthenticatedUser(
        params: ReposCreateForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      createFork(
        params: ReposCreateForkParams,
        callback?: Callback
      ): Promise<any>,
      createHook(
        params: ReposCreateHookParams,
        callback?: Callback
      ): Promise<any>,
      createInOrg(
        params: ReposCreateInOrgParams,
        callback?: Callback
      ): Promise<any>,
      createRelease(
        params: ReposCreateReleaseParams,
        callback?: Callback
      ): Promise<any>,
      createStatus(
        params: ReposCreateStatusParams,
        callback?: Callback
      ): Promise<any>,
      declineInvitation(
        params: ReposDeclineInvitationParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: ReposDeleteParams, callback?: Callback): Promise<any>,
      deleteCommitComment(
        params: ReposDeleteCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      deleteDownload(
        params: ReposDeleteDownloadParams,
        callback?: Callback
      ): Promise<any>,
      deleteFile(
        params: ReposDeleteFileParams,
        callback?: Callback
      ): Promise<any>,
      deleteHook(
        params: ReposDeleteHookParams,
        callback?: Callback
      ): Promise<any>,
      deleteInvitation(
        params: ReposDeleteInvitationParams,
        callback?: Callback
      ): Promise<any>,
      deleteRelease(
        params: ReposDeleteReleaseParams,
        callback?: Callback
      ): Promise<any>,
      deleteReleaseAsset(
        params: ReposDeleteReleaseAssetParams,
        callback?: Callback
      ): Promise<any>,
      get(params: ReposGetParams, callback?: Callback): Promise<any>,
      getArchiveLink(
        params: ReposGetArchiveLinkParams,
        callback?: Callback
      ): Promise<any>,
      getBranch(
        params: ReposGetBranchParams,
        callback?: Callback
      ): Promise<any>,
      getBranchProtection(
        params: ReposGetBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      getClones(
        params: ReposGetClonesParams,
        callback?: Callback
      ): Promise<any>,
      getCodeFrequencyStats(
        params: ReposGetCodeFrequencyStatsParams,
        callback?: Callback
      ): Promise<any>,
      getCollaboratorPermissionLevel(
        params: ReposGetCollaboratorPermissionLevelParams,
        callback?: Callback
      ): Promise<any>,
      getCombinedStatusForRef(
        params: ReposGetCombinedStatusForRefParams,
        callback?: Callback
      ): Promise<any>,
      getCommit(
        params: ReposGetCommitParams,
        callback?: Callback
      ): Promise<any>,
      getCommitActivityStats(
        params: ReposGetCommitActivityStatsParams,
        callback?: Callback
      ): Promise<any>,
      getCommitComment(
        params: ReposGetCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      getCommitRefSha(
        params: ReposGetCommitRefShaParams,
        callback?: Callback
      ): Promise<any>,
      getContents(
        params: ReposGetContentsParams,
        callback?: Callback
      ): Promise<any>,
      getContributorsStats(
        params: ReposGetContributorsStatsParams,
        callback?: Callback
      ): Promise<any>,
      getDeployKey(
        params: ReposGetDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      getDeployment(
        params: ReposGetDeploymentParams,
        callback?: Callback
      ): Promise<any>,
      getDeploymentStatus(
        params: ReposGetDeploymentStatusParams,
        callback?: Callback
      ): Promise<any>,
      getDownload(
        params: ReposGetDownloadParams,
        callback?: Callback
      ): Promise<any>,
      getHook(params: ReposGetHookParams, callback?: Callback): Promise<any>,
      getLatestPagesBuild(
        params: ReposGetLatestPagesBuildParams,
        callback?: Callback
      ): Promise<any>,
      getLatestRelease(
        params: ReposGetLatestReleaseParams,
        callback?: Callback
      ): Promise<any>,
      getPages(params: ReposGetPagesParams, callback?: Callback): Promise<any>,
      getPagesBuild(
        params: ReposGetPagesBuildParams,
        callback?: Callback
      ): Promise<any>,
      getParticipationStats(
        params: ReposGetParticipationStatsParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchAdminEnforcement(
        params: ReposGetProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchPullRequestReviewEnforcement(
        params: ReposGetProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRequiredSignatures(
        params: ReposGetProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRequiredStatusChecks(
        params: ReposGetProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRestrictions(
        params: ReposGetProtectedBranchRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      getPunchCardStats(
        params: ReposGetPunchCardStatsParams,
        callback?: Callback
      ): Promise<any>,
      getReadme(
        params: ReposGetReadmeParams,
        callback?: Callback
      ): Promise<any>,
      getRelease(
        params: ReposGetReleaseParams,
        callback?: Callback
      ): Promise<any>,
      getReleaseAsset(
        params: ReposGetReleaseAssetParams,
        callback?: Callback
      ): Promise<any>,
      getReleaseByTag(
        params: ReposGetReleaseByTagParams,
        callback?: Callback
      ): Promise<any>,
      getTopPaths(
        params: ReposGetTopPathsParams,
        callback?: Callback
      ): Promise<any>,
      getTopReferrers(
        params: ReposGetTopReferrersParams,
        callback?: Callback
      ): Promise<any>,
      getViews(params: ReposGetViewsParams, callback?: Callback): Promise<any>,
      list(params: ReposListParams, callback?: Callback): Promise<any>,
      listAssetsForRelease(
        params: ReposListAssetsForReleaseParams,
        callback?: Callback
      ): Promise<any>,
      listBranches(
        params: ReposListBranchesParams,
        callback?: Callback
      ): Promise<any>,
      listCollaborators(
        params: ReposListCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      listCommentsForCommit(
        params: ReposListCommentsForCommitParams,
        callback?: Callback
      ): Promise<any>,
      listCommitComments(
        params: ReposListCommitCommentsParams,
        callback?: Callback
      ): Promise<any>,
      listCommits(
        params: ReposListCommitsParams,
        callback?: Callback
      ): Promise<any>,
      listContributors(
        params: ReposListContributorsParams,
        callback?: Callback
      ): Promise<any>,
      listDeployKeys(
        params: ReposListDeployKeysParams,
        callback?: Callback
      ): Promise<any>,
      listDeploymentStatuses(
        params: ReposListDeploymentStatusesParams,
        callback?: Callback
      ): Promise<any>,
      listDeployments(
        params: ReposListDeploymentsParams,
        callback?: Callback
      ): Promise<any>,
      listDownloads(
        params: ReposListDownloadsParams,
        callback?: Callback
      ): Promise<any>,
      listForOrg(
        params: ReposListForOrgParams,
        callback?: Callback
      ): Promise<any>,
      listForUser(
        params: ReposListForUserParams,
        callback?: Callback
      ): Promise<any>,
      listForks(
        params: ReposListForksParams,
        callback?: Callback
      ): Promise<any>,
      listHooks(
        params: ReposListHooksParams,
        callback?: Callback
      ): Promise<any>,
      listInvitations(
        params: ReposListInvitationsParams,
        callback?: Callback
      ): Promise<any>,
      listInvitationsForAuthenticatedUser(
        params: ReposListInvitationsForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listLanguages(
        params: ReposListLanguagesParams,
        callback?: Callback
      ): Promise<any>,
      listPagesBuilds(
        params: ReposListPagesBuildsParams,
        callback?: Callback
      ): Promise<any>,
      listProtectedBranchRequiredStatusChecksContexts(
        params: ReposListProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      listProtectedBranchTeamRestrictions(
        params: ReposListProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      listProtectedBranchUserRestrictions(
        params: ReposListProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      listPublic(
        params: ReposListPublicParams,
        callback?: Callback
      ): Promise<any>,
      listReleases(
        params: ReposListReleasesParams,
        callback?: Callback
      ): Promise<any>,
      listStatusesForRef(
        params: ReposListStatusesForRefParams,
        callback?: Callback
      ): Promise<any>,
      listTags(params: ReposListTagsParams, callback?: Callback): Promise<any>,
      listTeams(
        params: ReposListTeamsParams,
        callback?: Callback
      ): Promise<any>,
      listTopics(
        params: ReposListTopicsParams,
        callback?: Callback
      ): Promise<any>,
      merge(params: ReposMergeParams, callback?: Callback): Promise<any>,
      pingHook(params: ReposPingHookParams, callback?: Callback): Promise<any>,
      removeBranchProtection(
        params: ReposRemoveBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      removeCollaborator(
        params: ReposRemoveCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      removeDeployKey(
        params: ReposRemoveDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchAdminEnforcement(
        params: ReposRemoveProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchPullRequestReviewEnforcement(
        params: ReposRemoveProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredSignatures(
        params: ReposRemoveProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredStatusChecks(
        params: ReposRemoveProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredStatusChecksContexts(
        params: ReposRemoveProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRestrictions(
        params: ReposRemoveProtectedBranchRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchTeamRestrictions(
        params: ReposRemoveProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchUserRestrictions(
        params: ReposRemoveProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchRequiredStatusChecksContexts(
        params: ReposReplaceProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchTeamRestrictions(
        params: ReposReplaceProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchUserRestrictions(
        params: ReposReplaceProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceTopics(
        params: ReposReplaceTopicsParams,
        callback?: Callback
      ): Promise<any>,
      requestPageBuild(
        params: ReposRequestPageBuildParams,
        callback?: Callback
      ): Promise<any>,
      retrieveCommunityProfileMetrics(
        params: ReposRetrieveCommunityProfileMetricsParams,
        callback?: Callback
      ): Promise<any>,
      testPushHook(
        params: ReposTestPushHookParams,
        callback?: Callback
      ): Promise<any>,
      transfer(params: ReposTransferParams, callback?: Callback): Promise<any>,
      update(params: ReposUpdateParams, callback?: Callback): Promise<any>,
      updateBranchProtection(
        params: ReposUpdateBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      updateCommitComment(
        params: ReposUpdateCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      updateFile(
        params: ReposUpdateFileParams,
        callback?: Callback
      ): Promise<any>,
      updateHook(
        params: ReposUpdateHookParams,
        callback?: Callback
      ): Promise<any>,
      updateInformationAboutPagesSite(
        params: ReposUpdateInformationAboutPagesSiteParams,
        callback?: Callback
      ): Promise<any>,
      updateInvitation(
        params: ReposUpdateInvitationParams,
        callback?: Callback
      ): Promise<any>,
      updateProtectedBranchPullRequestReviewEnforcement(
        params: ReposUpdateProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      updateProtectedBranchRequiredStatusChecks(
        params: ReposUpdateProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      updateRelease(
        params: ReposUpdateReleaseParams,
        callback?: Callback
      ): Promise<any>,
      updateReleaseAsset(
        params: ReposUpdateReleaseAssetParams,
        callback?: Callback
      ): Promise<any>,
      uploadReleaseAsset(
        params: ReposUploadReleaseAssetParams,
        callback?: Callback
      ): Promise<any>
    };
    search: {
      code(params: SearchCodeParams, callback?: Callback): Promise<any>,
      commits(params: SearchCommitsParams, callback?: Callback): Promise<any>,
      issues(params: SearchIssuesParams, callback?: Callback): Promise<any>,
      labels(params: SearchLabelsParams, callback?: Callback): Promise<any>,
      repos(params: SearchReposParams, callback?: Callback): Promise<any>,
      topics(params: SearchTopicsParams, callback?: Callback): Promise<any>,
      users(params: SearchUsersParams, callback?: Callback): Promise<any>
    };
    teams: {
      addMember(
        params: TeamsAddMemberParams,
        callback?: Callback
      ): Promise<any>,
      addOrUpdateMembership(
        params: TeamsAddOrUpdateMembershipParams,
        callback?: Callback
      ): Promise<any>,
      addOrUpdateProject(
        params: TeamsAddOrUpdateProjectParams,
        callback?: Callback
      ): Promise<any>,
      addOrUpdateRepo(
        params: TeamsAddOrUpdateRepoParams,
        callback?: Callback
      ): Promise<any>,
      checkManagesRepo(
        params: TeamsCheckManagesRepoParams,
        callback?: Callback
      ): Promise<any>,
      create(params: TeamsCreateParams, callback?: Callback): Promise<any>,
      createDiscussion(
        params: TeamsCreateDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      createDiscussionComment(
        params: TeamsCreateDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: TeamsDeleteParams, callback?: Callback): Promise<any>,
      deleteDiscussion(
        params: TeamsDeleteDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      deleteDiscussionComment(
        params: TeamsDeleteDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>,
      get(params: TeamsGetParams, callback?: Callback): Promise<any>,
      getDiscussion(
        params: TeamsGetDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      getDiscussionComment(
        params: TeamsGetDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>,
      getMember(
        params: TeamsGetMemberParams,
        callback?: Callback
      ): Promise<any>,
      getMembership(
        params: TeamsGetMembershipParams,
        callback?: Callback
      ): Promise<any>,
      list(params: TeamsListParams, callback?: Callback): Promise<any>,
      listChild(
        params: TeamsListChildParams,
        callback?: Callback
      ): Promise<any>,
      listDiscussionComments(
        params: TeamsListDiscussionCommentsParams,
        callback?: Callback
      ): Promise<any>,
      listDiscussions(
        params: TeamsListDiscussionsParams,
        callback?: Callback
      ): Promise<any>,
      listForAuthenticatedUser(
        params: TeamsListForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listMembers(
        params: TeamsListMembersParams,
        callback?: Callback
      ): Promise<any>,
      listPendingInvitations(
        params: TeamsListPendingInvitationsParams,
        callback?: Callback
      ): Promise<any>,
      listProjects(
        params: TeamsListProjectsParams,
        callback?: Callback
      ): Promise<any>,
      listRepos(
        params: TeamsListReposParams,
        callback?: Callback
      ): Promise<any>,
      removeMember(
        params: TeamsRemoveMemberParams,
        callback?: Callback
      ): Promise<any>,
      removeMembership(
        params: TeamsRemoveMembershipParams,
        callback?: Callback
      ): Promise<any>,
      removeProject(
        params: TeamsRemoveProjectParams,
        callback?: Callback
      ): Promise<any>,
      removeRepo(
        params: TeamsRemoveRepoParams,
        callback?: Callback
      ): Promise<any>,
      reviewProject(
        params: TeamsReviewProjectParams,
        callback?: Callback
      ): Promise<any>,
      update(params: TeamsUpdateParams, callback?: Callback): Promise<any>,
      updateDiscussion(
        params: TeamsUpdateDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      updateDiscussionComment(
        params: TeamsUpdateDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>
    };
    users: {
      addEmails(
        params: UsersAddEmailsParams,
        callback?: Callback
      ): Promise<any>,
      block(params: UsersBlockParams, callback?: Callback): Promise<any>,
      checkBlocked(
        params: UsersCheckBlockedParams,
        callback?: Callback
      ): Promise<any>,
      checkFollowing(
        params: UsersCheckFollowingParams,
        callback?: Callback
      ): Promise<any>,
      checkFollowingForUser(
        params: UsersCheckFollowingForUserParams,
        callback?: Callback
      ): Promise<any>,
      createGpgKey(
        params: UsersCreateGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      createPublicKey(
        params: UsersCreatePublicKeyParams,
        callback?: Callback
      ): Promise<any>,
      deleteEmails(
        params: UsersDeleteEmailsParams,
        callback?: Callback
      ): Promise<any>,
      deleteGpgKey(
        params: UsersDeleteGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      deletePublicKey(
        params: UsersDeletePublicKeyParams,
        callback?: Callback
      ): Promise<any>,
      follow(params: UsersFollowParams, callback?: Callback): Promise<any>,
      getAuthenticated(params: EmptyParams, callback?: Callback): Promise<any>,
      getByUsername(
        params: UsersGetByUsernameParams,
        callback?: Callback
      ): Promise<any>,
      getContextForUser(
        params: UsersGetContextForUserParams,
        callback?: Callback
      ): Promise<any>,
      getGpgKey(
        params: UsersGetGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      getPublicKey(
        params: UsersGetPublicKeyParams,
        callback?: Callback
      ): Promise<any>,
      list(params: UsersListParams, callback?: Callback): Promise<any>,
      listBlocked(params: EmptyParams, callback?: Callback): Promise<any>,
      listEmails(
        params: UsersListEmailsParams,
        callback?: Callback
      ): Promise<any>,
      listFollowersForAuthenticatedUser(
        params: UsersListFollowersForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listFollowersForUser(
        params: UsersListFollowersForUserParams,
        callback?: Callback
      ): Promise<any>,
      listFollowingForAuthenticatedUser(
        params: UsersListFollowingForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listFollowingForUser(
        params: UsersListFollowingForUserParams,
        callback?: Callback
      ): Promise<any>,
      listGpgKeys(
        params: UsersListGpgKeysParams,
        callback?: Callback
      ): Promise<any>,
      listGpgKeysForUser(
        params: UsersListGpgKeysForUserParams,
        callback?: Callback
      ): Promise<any>,
      listPublicEmails(
        params: UsersListPublicEmailsParams,
        callback?: Callback
      ): Promise<any>,
      listPublicKeys(
        params: UsersListPublicKeysParams,
        callback?: Callback
      ): Promise<any>,
      listPublicKeysForUser(
        params: UsersListPublicKeysForUserParams,
        callback?: Callback
      ): Promise<any>,
      togglePrimaryEmailVisibility(
        params: UsersTogglePrimaryEmailVisibilityParams,
        callback?: Callback
      ): Promise<any>,
      unblock(params: UsersUnblockParams, callback?: Callback): Promise<any>,
      unfollow(params: UsersUnfollowParams, callback?: Callback): Promise<any>,
      updateAuthenticated(
        params: UsersUpdateAuthenticatedParams,
        callback?: Callback
      ): Promise<any>
    };
  }

  declare var exports: Class<Github>;
}
